/******************************************************************************/
/****        Generated by IBExpert 2014.9.14.1 15.09.2014 20:49:43         ****/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES NONE;

--important: please use a firebird 3.0 fbclient.dll for windows 32

SET CLIENTLIB 'fbclient.dll';

CREATE DATABASE 'LOCALHOST:C:\db\DB1.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET NONE COLLATION NONE;



/******************************************************************************/
/****                              Generators                              ****/
/******************************************************************************/

CREATE GENERATOR CNT START WITH 0 INCREMENT BY 1;
SET GENERATOR CNT TO 10000;

CREATE GENERATOR ID START WITH 0 INCREMENT BY 1;
SET GENERATOR ID TO 0;



/******************************************************************************/
/****                              Exceptions                              ****/
/******************************************************************************/

CREATE EXCEPTION ERR 'Error';

CREATE EXCEPTION EX 'Error:';

CREATE EXCEPTION INS_PROD_EXCEPT 'Insufficient quantity of product';



/******************************************************************************/
/****                          Stored Procedures                           ****/
/******************************************************************************/

CREATE OR ALTER PROCEDURE CHANGESTOCK (
    PRODUCT_ID BIGINT,
    AMOUNT INTEGER)
AS
BEGIN
  EXIT;
END;





CREATE OR ALTER PROCEDURE CREATE_100_ORDERS
AS
BEGIN
  EXIT;
END;





CREATE OR ALTER PROCEDURE CREATE_1000_ORDERS
AS
BEGIN
  EXIT;
END;





CREATE OR ALTER PROCEDURE CREATE_MORE_ORDERS
AS
BEGIN
  EXIT;
END;





CREATE OR ALTER PROCEDURE DELETEALL
AS
BEGIN
  EXIT;
END;





CREATE OR ALTER PROCEDURE IBESOUNDEX (
    WORD VARCHAR(1000) CHARACTER SET NONE COLLATE NONE,
    LNG CHAR(3) CHARACTER SET NONE COLLATE NONE,
    SLEN BIGINT = 4)
RETURNS (
    SOUNDEX VARCHAR(1000) CHARACTER SET NONE COLLATE NONE)
AS
BEGIN
  SUSPEND;
END;





CREATE OR ALTER PROCEDURE IBESOUNDEXC (
    WORD VARCHAR(1000) CHARACTER SET NONE COLLATE NONE)
RETURNS (
    POS BIGINT,
    C CHAR(1) CHARACTER SET NONE COLLATE NONE)
AS
BEGIN
  SUSPEND;
END;





CREATE OR ALTER PROCEDURE IBESOUNDEXLIST (
    WORD VARCHAR(1000) CHARACTER SET NONE COLLATE NONE,
    LNG CHAR(3) CHARACTER SET NONE COLLATE NONE,
    SLEN BIGINT = 4)
RETURNS (
    SOUNDEX VARCHAR(1000) CHARACTER SET NONE COLLATE NONE)
AS
BEGIN
  SUSPEND;
END;





CREATE OR ALTER PROCEDURE INITALL (
    CNT NUMERIC(18,0))
AS
BEGIN
  EXIT;
END;





CREATE OR ALTER PROCEDURE MV_TOP100SALES_INTERFACE
RETURNS (
    TITLE VARCHAR(50) CHARACTER SET NONE COLLATE NONE,
    AMOUNT BIGINT)
AS
BEGIN
  SUSPEND;
END;





CREATE OR ALTER PROCEDURE MV_TOP100SALES_UPDATE
AS
BEGIN
  EXIT;
END;





CREATE OR ALTER PROCEDURE PUTILS_PSOUNDEX_TEST
RETURNS (
    RES VARCHAR(200) CHARACTER SET NONE COLLATE NONE)
AS
BEGIN
  SUSPEND;
END;







/******************************************************************************/
/****                           Stored Functions                           ****/
/******************************************************************************/

CREATE OR ALTER FUNCTION SOUNDEX (
    WORD VARCHAR(1000) CHARACTER SET NONE COLLATE NONE,
    LNG CHAR(3) CHARACTER SET NONE COLLATE NONE,
    SLEN BIGINT = 4)
RETURNS VARCHAR(1000) CHARACTER SET NONE COLLATE NONE
AS
BEGIN
  RETURN NULL;
END;







/******************************************************************************/
/****                           Package Headers                            ****/
/******************************************************************************/

CREATE OR ALTER PACKAGE PUTILS
AS
BEGIN
    PROCEDURE PSOUNDEX(
    WORD varchar(1000),
    LNG char(3),
    SLEN bigint = 4)
    RETURNS (SOUNDEX VARCHAR(1000)); -- public procedure
 END;




/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/



CREATE TABLE CATEGORY (
    ID   NUMERIC(18,0) NOT NULL,
    TXT  VARCHAR(20) CHARACTER SET NONE
);

CREATE TABLE CUSTOMER (
    ID                    NUMERIC(18,0) NOT NULL,
    FIRSTNAME             VARCHAR(50) CHARACTER SET NONE NOT NULL,
    LASTNAME              VARCHAR(50) CHARACTER SET NONE NOT NULL,
    ADDRESS1              VARCHAR(50) CHARACTER SET NONE NOT NULL,
    ADDRESS2              VARCHAR(50) CHARACTER SET NONE,
    CITY                  VARCHAR(50) CHARACTER SET NONE NOT NULL,
    STATE                 VARCHAR(50) CHARACTER SET NONE,
    ZIP                   INTEGER,
    COUNTRY               VARCHAR(50) CHARACTER SET NONE NOT NULL,
    REGION                SMALLINT NOT NULL,
    EMAIL                 VARCHAR(50) CHARACTER SET NONE,
    PHONE                 VARCHAR(50) CHARACTER SET NONE,
    CREDITCARDTYPE        SMALLINT NOT NULL,
    CREDITCARD            VARCHAR(50) CHARACTER SET NONE NOT NULL,
    CREDITCARDEXPIRATION  VARCHAR(50) CHARACTER SET NONE NOT NULL,
    USERNAME              VARCHAR(50) CHARACTER SET NONE NOT NULL,
    PASSWD                VARCHAR(50) CHARACTER SET NONE NOT NULL,
    AGE                   SMALLINT,
    INCOME                NUMERIC(18,0),
    GENDER                VARCHAR(1) CHARACTER SET NONE
);

CREATE TABLE CUSTOMER_HISTORY (
    CUSTOMER_ID  NUMERIC(18,0) NOT NULL,
    ORDERS_ID    NUMERIC(18,0) NOT NULL,
    PRODUCT_ID   NUMERIC(18,0) NOT NULL
);

CREATE TABLE IBESOUNDEXWEIGHT (
    ID      BIGINT,
    LNG     CHAR(3) CHARACTER SET NONE,
    C       CHAR(1) CHARACTER SET NONE,
    WEIGHT  BIGINT
);

CREATE TABLE IBESOUNDEXWORD (
    ID           BIGINT NOT NULL,
    WORD         VARCHAR(1000) CHARACTER SET NONE,
    SOUNDEX_ENG  VARCHAR(1000) CHARACTER SET NONE,
    SOUNDEX_GER  VARCHAR(1000) CHARACTER SET NONE
);

CREATE TABLE INVENTORY (
    ID             NUMERIC(18,0) NOT NULL,
    PRODUCT_ID     NUMERIC(18,0) NOT NULL,
    QUAN_IN_STOCK  NUMERIC(18,0) NOT NULL
);

CREATE TABLE MV (
    ID          BIGINT,
    VIEWNAME    VARCHAR(32) CHARACTER SET NONE COLLATE NONE,
    LASTUPDATE  TIMESTAMP
);

CREATE TABLE MV_TOP100SALES (
    TITLE   VARCHAR(50) CHARACTER SET NONE COLLATE NONE,
    AMOUNT  BIGINT
);

CREATE TABLE ORDERLINE (
    ID          NUMERIC(18,0) NOT NULL,
    ORDERS_ID   NUMERIC(18,0) NOT NULL,
    PRODUCT_ID  NUMERIC(18,0) NOT NULL,
    QUANTITY    SMALLINT NOT NULL,
    ORDERDATE   DATE NOT NULL
);

CREATE TABLE ORDERS (
    ID           NUMERIC(18,0) NOT NULL,
    ORDERDATE    DATE NOT NULL,
    CUSTOMER_ID  NUMERIC(18,0),
    NETAMOUNT    NUMERIC(12,2) NOT NULL,
    TAX          NUMERIC(12,2) NOT NULL,
    TOTALAMOUNT  NUMERIC(12,2) NOT NULL
);

CREATE TABLE PRODUCT (
    ID           NUMERIC(18,0) NOT NULL,
    CATEGORY_ID  NUMERIC(18,0) NOT NULL,
    TITLE        VARCHAR(50) CHARACTER SET NONE NOT NULL,
    ACTOR        VARCHAR(50) CHARACTER SET NONE NOT NULL,
    PRICE        NUMERIC(12,2) NOT NULL,
    SPECIAL      SMALLINT
);

CREATE TABLE REORDER (
    PRODUCT_ID      NUMERIC(18,0) NOT NULL,
    DATE_LOW        DATE NOT NULL,
    QUAN_LOW        NUMERIC(18,0) NOT NULL,
    DATE_REORDERED  DATE,
    QUAN_REORDERED  NUMERIC(18,0),
    DATE_EXPECTED   DATE
);

CREATE TABLE TMP_ADR (
    ID   NUMERIC(18,0) NOT NULL,
    TXT  VARCHAR(50) CHARACTER SET NONE
);

CREATE TABLE TMP_CITY (
    ID   NUMERIC(18,0) NOT NULL,
    TXT  VARCHAR(50) CHARACTER SET NONE
);

CREATE TABLE TMP_FN (
    ID   NUMERIC(18,0) NOT NULL,
    TXT  VARCHAR(20) CHARACTER SET NONE
);

CREATE TABLE TMP_FN2 (
    ID   NUMERIC(18,0) NOT NULL,
    TXT  VARCHAR(20) CHARACTER SET NONE
);

CREATE TABLE TMP_LN (
    ID   NUMERIC(18,0) NOT NULL,
    TXT  VARCHAR(20) CHARACTER SET NONE
);

CREATE TABLE TMP_LN2 (
    ID   NUMERIC(18,0) NOT NULL,
    TXT  VARCHAR(20) CHARACTER SET NONE
);

CREATE TABLE TMP_STATE (
    ID   NUMERIC(18,0) NOT NULL,
    TXT  VARCHAR(2) CHARACTER SET NONE
);

CREATE TABLE TMP_TITLEWORD (
    ID   NUMERIC(18,0) NOT NULL,
    TXT  VARCHAR(20) CHARACTER SET NONE
);



/******************************************************************************/
/****                                Views                                 ****/
/******************************************************************************/


/* View: V_PRODUCT */
CREATE VIEW V_PRODUCT(
    ID,
    CATEGORY_ID,
    TITLE,
    ACTOR,
    PRICE,
    SPECIAL,
    STOCK)
AS
select
    id,
    category_id,
    title,
    actor,
    price,
    special,
    (select sum(inventory.quan_in_stock) from inventory where inventory.product_id=product.id)
from product
;



/* View: V_TOP100SALES */
CREATE VIEW V_TOP100SALES(
    TITLE,
    AMOUNT)
AS
select
    m.TITLE,
    m.AMOUNT
from
    mv_top100sales_interface m
;


INSERT INTO MV_TOP100SALES (TITLE, AMOUNT) VALUES ('CHANCE PATIENT DECEIVER', 59);
REINSERT ('SEABISCUIT OPUS CHASING', 32);
REINSERT ('DAY TURN ANYTHING', 32);
REINSERT ('WARS EMPIRE BOILED', 31);
REINSERT ('PITY GROUNDHOG MOB', 31);
REINSERT ('DANCES DANCING GUNFIGHT', 31);
REINSERT ('BORN FORRESTER GAMES', 31);
REINSERT ('WARS HOOK GOODFELLAS', 30);
REINSERT ('BROTHERHOOD ARTIST MAUDE', 30);
REINSERT ('TWISTED UNITED USUAL', 29);
REINSERT ('PAJAMA SWEET BOULEVARD', 29);
REINSERT ('LUST SWEET WARDROBE', 29);
REINSERT ('TADPOLE LOLA GREEDY', 28);
REINSERT ('SUNDANCE UNCUT AGENT', 28);
REINSERT ('REAP GENTLEMEN PATTON', 28);
REINSERT ('PRESIDENT DESERT CAROL', 28);
REINSERT ('FELLOWSHIP MASK PIANIST', 28);
REINSERT ('DISTURBING RACER ATTRACTION', 28);
REINSERT ('CONFUSED PEAK GOLDFINGER', 28);
REINSERT ('SPLASH DOUBTFIRE THIEF', 27);
REINSERT ('MALKOVICH PERFECT DOOM', 27);
REINSERT ('MIDSUMMER MAGIC FRONTIER', 27);
REINSERT ('INTERVIEW SWEET FEUD', 27);
REINSERT ('DOCTOR EARTH MALKOVICH', 27);
REINSERT ('CURTAIN FLATLINERS LION', 27);
REINSERT ('ZHIVAGO BONNIE SAMURAI', 27);
REINSERT ('TADPOLE BIRCH CLOSER', 26);
REINSERT ('SECRET SUNSET BIRDS', 26);
REINSERT ('RULES SHOOTIST CROOKED', 26);
REINSERT ('PHANTOM CLUE FLIGHT', 26);
REINSERT ('NOTORIOUS FANTASIA BADMAN', 26);
REINSERT ('MADIGAN YOUTH METAL', 26);
REINSERT ('MAJESTIC CONQUERER MODEL', 26);
REINSERT ('HOMEWARD VICTORY BINGO', 26);
REINSERT ('WESTWARD SPIRITED CLYDE', 26);
REINSERT ('TEQUILA MUSCLE SUPER', 25);
REINSERT ('SHANE REAP VALLEY', 25);
REINSERT ('SIDE MASSACRE VALENTINE', 25);
REINSERT ('SMOOCHY STRANGELOVE DUMBO', 25);
REINSERT ('SQUAD GANGS CANDLES', 25);
REINSERT ('PHILADELPHIA CLYDE FROGMEN', 25);
REINSERT ('INTRIGUE REIGN MALKOVICH', 25);
REINSERT ('GOODFELLAS LIAISONS LEGALLY', 25);
REINSERT ('FISH SAMURAI SWARM', 25);
REINSERT ('DAY DIVIDE CONTROL', 25);
REINSERT ('CONFIDENTIAL MAGNOLIA CLERKS', 25);
REINSERT ('BETRAYED TRIP PACKER', 25);
REINSERT ('BILL HARPER AMERICAN', 25);
REINSERT ('BOWFINGER ROCK SLING', 25);
REINSERT ('WARDROBE BADMAN CRUELTY', 24);
REINSERT ('SADDLE SONS SAGEBRUSH', 24);
REINSERT ('SAINTS GREASE ROBBERY', 24);
REINSERT ('SLING ACADEMY TROJAN', 24);
REINSERT ('SOLDIERS DARES WAGON', 24);
REINSERT ('SOLDIERS MAGNOLIA DOORS', 24);
REINSERT ('SQUAD NEIGHBORS LADYBUGS', 24);
REINSERT ('PARK ATLANTIS RANDOM', 24);
REINSERT ('RAGE BANGER HALLOWEEN', 24);
REINSERT ('PERDITION HOLIDAY DYING', 24);
REINSERT ('KING FANTASIA CYCLONE', 24);
REINSERT ('JAWS JADE ORANGE', 24);
REINSERT ('JERICHO DYING MAJESTIC', 24);
REINSERT ('FORWARD PARK DUMBO', 24);
REINSERT ('DRAGONFLY COAST DIVINE', 24);
REINSERT ('FRENCH DUMBO JUMANJI', 24);
REINSERT ('BEDAZZLED BALLROOM TENENBAUMS', 24);
REINSERT ('ARGONAUTS AIRPORT VANISHED', 24);
REINSERT ('WOLVES DRUMS TOOTSIE', 24);
REINSERT ('WYOMING MOCKINGBIRD LUST', 24);
REINSERT ('UNBREAKABLE WATERSHIP ARIZONA', 23);
REINSERT ('TORQUE SOUTH CHARIOTS', 23);
REINSERT ('TOMORROW JERICHO ALADDIN', 23);
REINSERT ('TRAMP WATERSHIP DRUMS', 23);
REINSERT ('SWARM UNITED DUMBO', 23);
REINSERT ('SAVANNAH INTENTIONS SALUTE', 23);
REINSERT ('SATISFACTION VALENTINE MURDER', 23);
REINSERT ('SEABISCUIT BEVERLY SENSE', 23);
REINSERT ('SLUMS GILBERT ACE', 23);
REINSERT ('ROCKETEER PEARL SINNERS', 23);
REINSERT ('SPY MONEY NATURAL', 23);
REINSERT ('PERDITION CHARIOTS SPICE', 23);
REINSERT ('MADIGAN TITANIC SWEDEN', 23);
REINSERT ('MANNEQUIN OSCAR SPLASH', 23);
REINSERT ('LEGEND REDS FERRIS', 23);
REINSERT ('LEGALLY SUNSET GROSSE', 23);
REINSERT ('KISS HELLFIGHTERS SLEEPING', 23);
REINSERT ('LICENSE FLASH LEAGUE', 23);
REINSERT ('MURDER ALAMO RUGRATS', 23);
REINSERT ('HAWK HANGING IMPACT', 23);
REINSERT ('JACKET PSYCHO NATIONAL', 23);
REINSERT ('INCH HAPPINESS FEUD', 23);
REINSERT ('HOUSE HORN ESCAPE', 23);
REINSERT ('GRACELAND WIZARD ANALYZE', 23);
REINSERT ('HUSTLER FEUD APACHE', 23);
REINSERT ('GANGS SLACKER MONTEREY', 23);
REINSERT ('FERRIS GUMP BOULEVARD', 23);
REINSERT ('GILMORE LOSE GRADUATE', 23);
REINSERT ('FRANKENSTEIN FURY JAPANESE', 23);
REINSERT ('EXPRESS HOCUS FORREST', 23);
REINSERT ('DYING HUMAN FLIGHT', 23);

COMMIT WORK;



/******************************************************************************/
/****                             Primary Keys                             ****/
/******************************************************************************/

ALTER TABLE CATEGORY ADD PRIMARY KEY (ID);
ALTER TABLE CUSTOMER ADD CONSTRAINT PK_CUSTOMER PRIMARY KEY (ID);
ALTER TABLE CUSTOMER_HISTORY ADD CONSTRAINT PK_CUSTOMER_HISTORY PRIMARY KEY (CUSTOMER_ID, ORDERS_ID, PRODUCT_ID);
ALTER TABLE IBESOUNDEXWORD ADD CONSTRAINT PK_IBESOUNDEXWORD PRIMARY KEY (ID);
ALTER TABLE INVENTORY ADD PRIMARY KEY (ID);
ALTER TABLE ORDERLINE ADD CONSTRAINT PK_ORDERLINE PRIMARY KEY (ID);
ALTER TABLE ORDERS ADD CONSTRAINT PK_ORDERS PRIMARY KEY (ID);
ALTER TABLE PRODUCT ADD CONSTRAINT PK_PRODUCT PRIMARY KEY (ID);
ALTER TABLE REORDER ADD CONSTRAINT PK_REORDER PRIMARY KEY (PRODUCT_ID);
ALTER TABLE TMP_ADR ADD CONSTRAINT PK_TMP_ADR PRIMARY KEY (ID);
ALTER TABLE TMP_CITY ADD CONSTRAINT PK_TMP_CITY PRIMARY KEY (ID);
ALTER TABLE TMP_FN ADD CONSTRAINT PK_TMP_FN PRIMARY KEY (ID);
ALTER TABLE TMP_FN2 ADD CONSTRAINT PK_TMP_FN2 PRIMARY KEY (ID);
ALTER TABLE TMP_LN ADD CONSTRAINT PK_TMP_LN PRIMARY KEY (ID);
ALTER TABLE TMP_LN2 ADD CONSTRAINT PK_TMP_LN2 PRIMARY KEY (ID);
ALTER TABLE TMP_STATE ADD CONSTRAINT PK_TMP_STATE PRIMARY KEY (ID);
ALTER TABLE TMP_TITLEWORD ADD CONSTRAINT PK_TMP_TITLEWORD PRIMARY KEY (ID);


/******************************************************************************/
/****                             Foreign Keys                             ****/
/******************************************************************************/

ALTER TABLE CUSTOMER_HISTORY ADD CONSTRAINT FK_CUSTOMER_HISTORY FOREIGN KEY (ORDERS_ID) REFERENCES ORDERS (ID);
ALTER TABLE CUSTOMER_HISTORY ADD CONSTRAINT FK_CUSTOMER_HISTORY2 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (ID);
ALTER TABLE CUSTOMER_HISTORY ADD CONSTRAINT FK_CUSTOMER_HISTORY_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (ID) ON DELETE CASCADE;
ALTER TABLE INVENTORY ADD CONSTRAINT FK_INVENTORY FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (ID);
ALTER TABLE ORDERLINE ADD CONSTRAINT FK_ORDERLINE FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (ID);
ALTER TABLE ORDERLINE ADD CONSTRAINT FK_ORDERS_ID FOREIGN KEY (ORDERS_ID) REFERENCES ORDERS (ID);
ALTER TABLE ORDERS ADD CONSTRAINT FK_CUSTOMERID_1 FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY (ID);
ALTER TABLE REORDER ADD CONSTRAINT FK_REORDER FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (ID);


/******************************************************************************/
/****                               Indices                                ****/
/******************************************************************************/

CREATE INDEX CUSTOMER_IDX1 ON CUSTOMER (FIRSTNAME);
CREATE DESCENDING INDEX CUSTOMER_IDX3 ON CUSTOMER (ID);
CREATE UNIQUE INDEX IX_CUSTOMER_USERNAME ON CUSTOMER (USERNAME);
CREATE INDEX IBESOUNDEXWORD_IDX1 ON IBESOUNDEXWORD (SOUNDEX_GER);
CREATE INDEX IBESOUNDEXWORD_IDX2 ON IBESOUNDEXWORD (SOUNDEX_ENG);
CREATE UNIQUE DESCENDING INDEX IBESOUNDEXWORD_IDX3 ON IBESOUNDEXWORD COMPUTED BY ((UPPER(WORD)));
ALTER INDEX IBESOUNDEXWORD_IDX3 INACTIVE;
CREATE INDEX MV_IDX1 ON MV (VIEWNAME);
CREATE DESCENDING INDEX ORDERS_IDX1 ON ORDERS (ORDERDATE);
CREATE INDEX IX_PROD_ACTOR ON PRODUCT (ACTOR);
CREATE INDEX IX_PROD_CATEGORY ON PRODUCT (CATEGORY_ID);
CREATE INDEX IX_PROD_SPECIAL ON PRODUCT (SPECIAL);
CREATE INDEX IX_PROD_TITLE ON PRODUCT (TITLE);
CREATE INDEX PRODUCT_IDX1 ON PRODUCT (CATEGORY_ID, SPECIAL);
CREATE DESCENDING INDEX PRODUCT_IDX2 ON PRODUCT (ID);


/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/



/******************************************************************************/
/****                     Triggers for updatable views                     ****/
/******************************************************************************/



/* Trigger: V_PRODUCT_BD */
CREATE OR ALTER TRIGGER V_PRODUCT_BD FOR V_PRODUCT
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  POST_EVENT 'DUMMY_EVENT';
END;

/* Trigger: V_PRODUCT_BI */
CREATE OR ALTER TRIGGER V_PRODUCT_BI FOR V_PRODUCT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  POST_EVENT 'DUMMY_EVENT';
END;

/* Trigger: V_PRODUCT_BU */
CREATE OR ALTER TRIGGER V_PRODUCT_BU FOR V_PRODUCT
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  POST_EVENT 'DUMMY_EVENT';
END;

/* Trigger: V_PRODUCT_BD */
CREATE OR ALTER TRIGGER V_PRODUCT_BD FOR V_PRODUCT
ACTIVE BEFORE DELETE POSITION 0
as
begin
  delete from product
  where (id = old.id);
end;

/* Trigger: V_PRODUCT_BI */
CREATE OR ALTER TRIGGER V_PRODUCT_BI FOR V_PRODUCT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  insert into product (
    id,
    category_id,
    title,
    actor,
    price,
    special)
  values (
    new.id,
    new.category_id,
    new.title,
    new.actor,
    new.price,
    new.special);
end;

/* Trigger: V_PRODUCT_BU */
CREATE OR ALTER TRIGGER V_PRODUCT_BU FOR V_PRODUCT
ACTIVE BEFORE UPDATE POSITION 0
as
declare variable sql varchar(32000);
declare variable amount_change integer;
begin
  if (new.stock<>old.stock) then
  begin
    amount_change=new.stock-old.stock;
    execute procedure changestock(new.id,:amount_change);
  end
  sql='update product set ';
  if (coalesce(new.category_id,0)<>coalesce(old.category_id,0)) then sql=sql||'category_id = '||new.category_id||',';
  if (coalesce(new.title,'')<>coalesce(old.title,'')) then sql=sql||'title = '''||new.title||''',';
  if (coalesce(new.actor,'')<>coalesce(old.actor,'')) then sql=sql||'actor = '''||new.actor||''',';
  if (coalesce(new.price,0)<>coalesce(old.price,0)) then sql=sql||'price = '||new.price||',';
  if (coalesce(new.special,0)<>coalesce(old.special,0)) then sql=sql||'special = '||new.special||',';
  if(sql containing ',')
  then
  begin
     sql=sql||' ID=ID where id='||old.id;
     execute statement :sql;
  end
end;

/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/



/* Trigger: CUSTOMER_BI0 */
CREATE OR ALTER TRIGGER CUSTOMER_BI0 FOR CUSTOMER
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if (new.id is null) then
    new.id = gen_id(id, 1);
END;

/* Trigger: IBESOUNDEXWEIGHT_BIU0 */
CREATE OR ALTER TRIGGER IBESOUNDEXWEIGHT_BIU0 FOR IBESOUNDEXWEIGHT
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
BEGIN
  NEW.LNG  = UPPER(NEW.LNG );
  NEW.C = LOWER(NEW.C);
END;

/* Trigger: IBESOUNDEXWORD_BIU0 */
CREATE OR ALTER TRIGGER IBESOUNDEXWORD_BIU0 FOR IBESOUNDEXWORD
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 /*$$IBE$$ DECLARE VARIABLE L_CHANGED CHAR(1); $$IBE$$*/ 
BEGIN /*$$IBE$$ 
  IF (NEW.ID IS NULL)
  THEN
    NEW.ID = GEN_ID(ID, 1);

  IF (COALESCE(NEW.WORD, '') <> COALESCE(OLD.WORD, ''))
  THEN 
    L_CHANGED = 'J';
  ELSE
    L_CHANGED = 'N';

  IF ((L_CHANGED = 'J') OR (COALESCE(NEW.SOUNDEX_ENG, '') = ''))
  THEN 
    EXECUTE PROCEDURE IBESOUNDEX(NEW.WORD, 'ENG')
      RETURNING_VALUES NEW.SOUNDEX_ENG;

  IF ((L_CHANGED = 'J') OR (COALESCE(NEW.SOUNDEX_GER, '') = ''))
  THEN 
    EXECUTE PROCEDURE IBESOUNDEX(NEW.WORD, 'GER', 5)
      RETURNING_VALUES NEW.SOUNDEX_GER;

 $$IBE$$*/ POST_EVENT '$$IBE$$';
END;

/* Trigger: INVENTORY_BI */
CREATE OR ALTER TRIGGER INVENTORY_BI FOR INVENTORY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(ID,1);
END;

/* Trigger: MV_BI */
CREATE OR ALTER TRIGGER MV_BI FOR MV
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(id,1);
end;

/* Trigger: ORDERLINE_AI0 */
CREATE OR ALTER TRIGGER ORDERLINE_AI0 FOR ORDERLINE
ACTIVE AFTER INSERT POSITION 0
AS

declare variable customer_id NUMERIC(18, 0);
begin
  select o.customer_id
  from orders o
  where o.id=new.orders_id
  into :customer_id;


  /*insert into customer_history (customer_id,orders_id,product_id)
  values (:customer_id,new.orders_id,new.product_id);*/
end;

/* Trigger: ORDERLINE_AI1 */
CREATE OR ALTER TRIGGER ORDERLINE_AI1 FOR ORDERLINE
ACTIVE AFTER INSERT POSITION 0
AS
declare variable q integer;
begin
  select sum(inventory.quan_in_stock) from inventory where inventory.product_id=new.product_id into :q;
  if (q<new.quantity) then
  begin 
    exception ins_prod_except;
  end
  else
    UPDATE INVENTORY
    SET QUAN_IN_STOCK = (QUAN_IN_STOCK-NEW.QUANTITY)
    WHERE PRODUCT_ID = new.product_id
    rows 1 to 1 ;
  when any do
    insert into inventory (product_id, quan_in_stock)
    values (new.product_id, (-new.quantity));
end;

/* Trigger: ORDERS_BI0 */
CREATE OR ALTER TRIGGER ORDERS_BI0 FOR ORDERS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if (new.id is null) then
    new.id = gen_id(id, 1);
END;



/******************************************************************************/
/****                          Stored Procedures                           ****/
/******************************************************************************/

CREATE OR ALTER PROCEDURE CHANGESTOCK (
    PRODUCT_ID BIGINT,
    AMOUNT INTEGER)
AS
declare variable INVENTORY_ID bigint;
declare variable NEW_AMOUNT integer;
declare variable ERRMSG varchar(200);
begin
  select first 1
      ID
  from
      INVENTORY
  where
      INVENTORY.PRODUCT_ID = :PRODUCT_ID
  into
      :INVENTORY_ID;

  select sum(inventory.quan_in_stock)
  from inventory
  where inventory.product_id=:product_id
  into :new_amount;
  new_amount=new_amount+:amount;

  update INVENTORY
  set INVENTORY.QUAN_IN_STOCK = :new_amount
  where INVENTORY.ID = :INVENTORY_ID;

  delete from inventory where product_id=:product_id
  and id<>:inventory_id;

  when any
  do
  begin
--    errmsg=gdscode;
--    exception err errmsg;
    insert into INVENTORY (PRODUCT_ID, QUAN_IN_STOCK)
    values (:PRODUCT_ID, :amount);
  end
 end;


CREATE OR ALTER PROCEDURE CREATE_100_ORDERS
AS
declare variable I numeric(18);
declare variable IX numeric(18);
declare variable IZ double precision;
declare variable PP numeric(18,2);
declare variable XID numeric(18);
declare variable XORDERDATE date;
declare variable XCUSTOMER_ID numeric(18);
declare variable XNETAMOUNT numeric(12,2);
declare variable XTAX numeric(12,2);
declare variable XTOTALAMOUNT numeric(12,2);
declare variable YID numeric(18);
declare variable YORDERS_ID numeric(18);
declare variable YPRODUCT_ID numeric(18);
declare variable YQUANTITY smallint;
declare variable YORDERDATE date;
declare variable CNT integer;
declare variable MIN_CUSTOMER_ID numeric(18);
declare variable MAX_CUSTOMER_ID numeric(18);
declare variable MIN_PRODUCT_ID numeric(18);
declare variable MAX_PRODUCT_ID numeric(18);
declare variable stt time;
declare variable sttx integer;
begin
  stt='now';
  cnt=gen_id(cnt,0);
  i=100;
  iz=cnt/730;
  select min(id) from product into :min_product_id;
  select max(id) from product into :max_product_id;
  select min(id) from customer into :min_customer_id;
  select max(id) from customer into :max_customer_id;

  while (i>0) do
  begin
    xid=gen_id(id,1);
    xORDERDATE=current_date-(i/iz)-cast((rand()*3) as integer);
    xcustomer_id=cast((rand()*(max_customer_id-min_customer_id)+min_customer_id) as integer);
    xNETAMOUNT=0;
    xtax=0;
    xTOTALAMOUNT=0;
    INSERT INTO ORDERS(ID, ORDERDATE, CUSTOMER_ID, NETAMOUNT, TAX, TOTALAMOUNT)
    VALUES (:xID, :xORDERDATE, :xCUSTOMER_ID, :xNETAMOUNT, :xTAX, :xTOTALAMOUNT);

    ix=cast((rand()*5)+1 as integer);
    while (ix>0) do
    begin

      yid=gen_id(id,1);
      yorders_id=xid;

      yproduct_id=cast((rand()*(max_product_id-min_product_id)+min_product_id) as integer);

      yquantity=cast((rand()*3)+1 as integer);
      yorderdate=xorderdate;

      INSERT INTO ORDERLINE(ID, ORDERS_ID, PRODUCT_ID, QUANTITY, ORDERDATE)
      VALUES (:yID, :yORDERS_ID, :yPRODUCT_ID, :yQUANTITY, :yORDERDATE);


      select product.price from product where product.id=:yproduct_id into pp;
      xNETAMOUNT=xNETAMOUNT+(:yquantity*:pp);

      ix=ix-1;
    end


    xTAX=xNETAMOUNT*.16;
    xTOTALAMOUNT=xNETAMOUNT+xtax;
    UPDATE ORDERS SET NETAMOUNT = :xNETAMOUNT,TAX = :xTAX, TOTALAMOUNT = :xTOTALAMOUNT
    WHERE (ID = :xID);


    i=i-1;
  end
  sttx=(cast('now' as time)-stt)*1000;
end;


CREATE OR ALTER PROCEDURE CREATE_1000_ORDERS
AS
declare variable I numeric(18);
declare variable IX numeric(18);
declare variable IZ double precision;
declare variable PP numeric(18,2);
declare variable XID numeric(18);
declare variable XORDERDATE date;
declare variable XCUSTOMER_ID numeric(18);
declare variable XNETAMOUNT numeric(12,2);
declare variable XTAX numeric(12,2);
declare variable XTOTALAMOUNT numeric(12,2);
declare variable YID numeric(18);
declare variable YORDERS_ID numeric(18);
declare variable YPRODUCT_ID numeric(18);
declare variable YQUANTITY smallint;
declare variable YORDERDATE date;
declare variable CNT integer;
declare variable MIN_CUSTOMER_ID numeric(18);
declare variable MAX_CUSTOMER_ID numeric(18);
declare variable MIN_PRODUCT_ID numeric(18);
declare variable MAX_PRODUCT_ID numeric(18);
declare variable stt time;
declare variable sttx integer;
begin
  stt='now';
  cnt=gen_id(cnt,0);
  i=1000;
  iz=cnt/730;
  select min(id) from product into :min_product_id;
  select max(id) from product into :max_product_id;
  select min(id) from customer into :min_customer_id;
  select max(id) from customer into :max_customer_id;

  while (i>0) do
  begin
    xid=gen_id(id,1);
    xORDERDATE=current_date-(i/iz)-cast((rand()*3) as integer);
    xcustomer_id=cast((rand()*(max_customer_id-min_customer_id)+min_customer_id) as integer);
    xNETAMOUNT=0;
    xtax=0;
    xTOTALAMOUNT=0;
    INSERT INTO ORDERS(ID, ORDERDATE, CUSTOMER_ID, NETAMOUNT, TAX, TOTALAMOUNT)
    VALUES (:xID, :xORDERDATE, :xCUSTOMER_ID, :xNETAMOUNT, :xTAX, :xTOTALAMOUNT);

    ix=cast((rand()*5)+1 as integer);
    while (ix>0) do
    begin

      yid=gen_id(id,1);
      yorders_id=xid;

      yproduct_id=cast((rand()*(max_product_id-min_product_id)+min_product_id) as integer);

      yquantity=cast((rand()*3)+1 as integer);
      yorderdate=xorderdate;

      INSERT INTO ORDERLINE(ID, ORDERS_ID, PRODUCT_ID, QUANTITY, ORDERDATE)
      VALUES (:yID, :yORDERS_ID, :yPRODUCT_ID, :yQUANTITY, :yORDERDATE);


      select product.price from product where product.id=:yproduct_id into pp;
      xNETAMOUNT=xNETAMOUNT+(:yquantity*:pp);

      ix=ix-1;
    end


    xTAX=xNETAMOUNT*.16;
    xTOTALAMOUNT=xNETAMOUNT+xtax;
    UPDATE ORDERS SET NETAMOUNT = :xNETAMOUNT,TAX = :xTAX, TOTALAMOUNT = :xTOTALAMOUNT
    WHERE (ID = :xID);


    i=i-1;
  end
  sttx=(cast('now' as time)-stt)*1000;
end;


CREATE OR ALTER PROCEDURE CREATE_MORE_ORDERS
AS
declare variable I numeric(18,0);
declare variable IX numeric(18,0);
declare variable IZ double precision;
declare variable PP numeric(18,2);
declare variable XID numeric(18,0);
declare variable XORDERDATE date;
declare variable XCUSTOMER_ID numeric(18,0);
declare variable XNETAMOUNT numeric(12,2);
declare variable XTAX numeric(12,2);
declare variable XTOTALAMOUNT numeric(12,2);
declare variable YID numeric(18,0);
declare variable YORDERS_ID numeric(18,0);
declare variable YPRODUCT_ID numeric(18,0);
declare variable YQUANTITY smallint;
declare variable YORDERDATE date;
declare variable CNT integer;
declare variable MIN_CUSTOMER_ID numeric(18,0);
declare variable MAX_CUSTOMER_ID numeric(18,0);
declare variable MIN_PRODUCT_ID numeric(18,0);
declare variable MAX_PRODUCT_ID numeric(18,0);
begin
  cnt=gen_id(cnt,0);
  i=cnt;
  iz=cnt/730;
  select min(id) from product into :min_product_id;
  select max(id) from product into :max_product_id;
  select min(id) from customer into :min_customer_id;
  select max(id) from customer into :max_customer_id;

  /*test*/
  while (i>0) do
  begin
    xid=gen_id(id,1);
    xORDERDATE=current_date-(i/iz)-cast((rand()*3) as integer);
    xcustomer_id=cast((rand()*(max_customer_id-min_customer_id)+min_customer_id) as integer);
    xNETAMOUNT=0;
    xtax=0;
    xTOTALAMOUNT=0;
    INSERT INTO ORDERS(ID, ORDERDATE, CUSTOMER_ID, NETAMOUNT, TAX, TOTALAMOUNT)
    VALUES (:xID, :xORDERDATE, :xCUSTOMER_ID, :xNETAMOUNT, :xTAX, :xTOTALAMOUNT);

    ix=cast((rand()*5)+1 as integer);
    while (ix>0) do
    begin

      yid=gen_id(id,1);
      yorders_id=xid;

      yproduct_id=cast((rand()*(max_product_id-min_product_id)+min_product_id) as integer);

      yquantity=cast((rand()*3)+1 as integer);
      yorderdate=xorderdate;

      INSERT INTO ORDERLINE(ID, ORDERS_ID, PRODUCT_ID, QUANTITY, ORDERDATE)
      VALUES (:yID, :yORDERS_ID, :yPRODUCT_ID, :yQUANTITY, :yORDERDATE);

      select product.price from product where product.id=:yproduct_id into pp;
      xNETAMOUNT=xNETAMOUNT+(:yquantity*:pp);

      ix=ix-1;
    end


    xTAX=xNETAMOUNT*.16;
    xTOTALAMOUNT=xNETAMOUNT+xtax;
    UPDATE ORDERS SET NETAMOUNT = :xNETAMOUNT,TAX = :xTAX, TOTALAMOUNT = :xTOTALAMOUNT
    WHERE (ID = :xID);


    i=i-1;
  end
end;


CREATE OR ALTER PROCEDURE DELETEALL
AS
declare variable I numeric(18);
begin
  delete from customer_history;
  delete from orderline;
  delete from orders;

  delete from inventory;

  delete from product;

  delete from customer;

  suspend;
end;


CREATE OR ALTER PROCEDURE IBESOUNDEX (
    WORD VARCHAR(1000) CHARACTER SET NONE COLLATE NONE,
    LNG CHAR(3) CHARACTER SET NONE COLLATE NONE,
    SLEN BIGINT = 4)
RETURNS (
    SOUNDEX VARCHAR(1000) CHARACTER SET NONE COLLATE NONE)
AS
declare variable CURRC char(1);
declare variable LASTC char(1);
declare variable LEN bigint;
declare variable WEIGHT bigint;
BEGIN
  SOUNDEX = ''           ;
  LEN    = 0            ;
  LASTC = ASCII_CHAR(0);
  FOR
      SELECT CASE
              WHEN POS = 1
                 /* First Position? then use first character. */
                 THEN UPPER(C)
                 /* else use weigth  */
                 ELSE CAST(MAXVALUE(WEIGHT, 0) AS CHAR(1))
             END,
             WEIGHT
        FROM
        (
             SELECT IBESOUNDEXC.POS,
                    IBESOUNDEXC.C,
                    COALESCE(IBESOUNDEXWEIGHT.WEIGHT, -1) as WEIGHT
          /* divide word into several character */
               FROM IBESOUNDEXC(:WORD)
          /* read the weigth for characters */
          LEFT JOIN IBESOUNDEXWEIGHT ON IBESOUNDEXWEIGHT.C = IBESOUNDEXC.C AND IBESOUNDEXWEIGHT.LNG = UPPER(:LNG)
        )
       WHERE WEIGHT BETWEEN -1 AND 9
    ORDER BY POS
  INTO
    :CURRC,
    :WEIGHT
  DO
  BEGIN
    /* use only up to soundex length given by param */
    IF (LEN < SLEN)
    THEN 
    BEGIN
      /* only add it if it is different from last used character and weigth <>-1*/
      /* first character will alway be used*/
      IF ((LASTC <> CURRC AND WEIGHT >= 0) OR LEN = 0)
      THEN 
      BEGIN
        /* Char '0' ist used f?r equal consonants */
        IF (CURRC <> '0' OR LEN = 0)
        THEN
        BEGIN
          SOUNDEX = SOUNDEX || CURRC;
          LEN    = LEN + 1                 ;
        END
        /* Remember current character as last character  */
        LASTC = CURRC;
      END
    END
    ELSE
    BEGIN
      /* Soundex lnength reached */
      EXIT;
    END
  END

  /* fill up to soundex length */
  WHILE (LEN < SLEN)
  DO
  BEGIN
    SOUNDEX = SOUNDEX || '0';
    LEN    = LEN + 1      ;
  END

END;


CREATE OR ALTER PROCEDURE IBESOUNDEXC (
    WORD VARCHAR(1000) CHARACTER SET NONE COLLATE NONE)
RETURNS (
    POS BIGINT,
    C CHAR(1) CHARACTER SET NONE COLLATE NONE)
AS
declare variable LEN bigint;
declare variable P bigint;
declare variable W varchar(1000);
BEGIN
  pos=0;
  LEN = COALESCE(CHAR_LENGTH(WORD), 0);
  IF (LEN > 0)
  THEN
  BEGIN
    P = 1;
    W  = LOWER(WORD);

    /* Alle C des Wortes mit Position (1-basiert) ausgeben. */
    WHILE (POS <= LEN)
    DO
    BEGIN

      /* Position und C ausgeben */
      POS = P;
      C= SUBSTRING(W FROM P FOR 1);
      SUSPEND;

      /* n?chste Position */
      P = P + 1;

    END

  END

END;


CREATE OR ALTER PROCEDURE IBESOUNDEXLIST (
    WORD VARCHAR(1000) CHARACTER SET NONE COLLATE NONE,
    LNG CHAR(3) CHARACTER SET NONE COLLATE NONE,
    SLEN BIGINT = 4)
RETURNS (
    SOUNDEX VARCHAR(1000) CHARACTER SET NONE COLLATE NONE)
AS
BEGIN
  EXECUTE PROCEDURE IBESOUNDEX(WORD, LNG, SLEN)
    RETURNING_VALUES SOUNDEX;
  SUSPEND;
END;


CREATE OR ALTER PROCEDURE INITALL (
    CNT NUMERIC(18,0))
AS
declare variable C numeric(18,0);
declare variable I numeric(18,0);
declare variable T varchar(80);
declare variable XID numeric(18,0);
declare variable XFIRSTNAME varchar(50);
declare variable XLASTNAME varchar(50);
declare variable XADDRESS1 varchar(50);
declare variable XADDRESS2 varchar(50);
declare variable XCITY varchar(50);
declare variable XSTATE varchar(50);
declare variable XZIP integer;
declare variable XCOUNTRY varchar(50);
declare variable XREGION smallint;
declare variable XEMAIL varchar(50);
declare variable XPHONE varchar(50);
declare variable XCREDITCARDTYPE numeric(18,0);
declare variable XCREDITCARD varchar(50);
declare variable XCREDITCARDEXPIRATION varchar(50);
declare variable XUSERNAME varchar(50);
declare variable XPASSWD varchar(50);
declare variable XAGE smallint;
declare variable XINCOME numeric(18,0);
declare variable XGENDER varchar(1);
declare variable XCATEGORY_ID numeric(18,0);
declare variable XTITLE varchar(2500);
declare variable XACTOR varchar(2500);
declare variable XPRICE numeric(12,2);
declare variable XSPECIAL smallint;
begin
  execute procedure deleteall;

  c=gen_id(id,-gen_id(id,0));   /*reset id*/
  c=gen_id(cnt,(-gen_id(cnt,0)+:cnt)); /*cnt auf anzahl setzen*/

  /*cust*/

  c=0;
  while (c<cnt) do
  begin
    c=c+1;
    xid=gen_id(id,1);

    i=cast((rand()*676)+1 as integer);
    select txt from tmp_fn where id=:i into :xfirstname;

    i=cast((rand()*1086)+1 as integer);
    select txt from tmp_ln where id=:i into :xlastname;

    i=cast((rand()*4710)+1 as integer);
    select txt from tmp_adr where id=:i into :xaddress1;

    xaddress2='-';

    xzip=cast((rand()*90000)+10000 as integer);

    xcountry='USA';

    i=cast((rand()*3234)+1 as integer);
    select txt from tmp_city where id=:i into :xcity;

    i=cast((rand()*51)+1 as integer);
    select txt from tmp_state where id=:i into :xstate;

    xREGION=cast((rand()*10)+1 as integer);

    xemail=xfirstname||'.'||xlastname||'@yahoo.com';

    t=cast((rand()*900)+100 as integer);
    xphone='1('||t;
    t=cast((rand()*900)+100 as integer);
    xphone=xphone||')'||t;
    t=cast((rand()*9000)+1000 as integer);
    xphone=xphone||'-'||t;

    xCREDITCARDTYPE=cast((rand()*4)+1 as integer);

    t=cast((rand()*9000)+1000 as integer);
    xCREDITCARD=t;
    t=cast((rand()*9000)+1000 as integer);
    xCREDITCARD=t||' '||xCREDITCARD;
    t=cast((rand()*9000)+1000 as integer);
    xCREDITCARD=t||' '||xCREDITCARD;
    t=cast((rand()*9000)+1000 as integer);
    xCREDITCARD=t||' '||xCREDITCARD;

    t=extract(year from current_date)+cast((rand()*5)+1 as integer);
    xCREDITCARDEXPIRATION=t;
    t=cast((rand()*12)+1 as integer);
    xCREDITCARDEXPIRATION=t||'/'||xCREDITCARDEXPIRATION;

    xusername=xfirstname||'.'||xlastname;
    xusername=xusername||(cnt+xid);

    xpasswd=cast((rand()*900000)+100000 as integer);

    xage=cast((rand()*60)+15 as integer);

    xincome=1000*(cast(rand()*90+10 as integer));

    i=cast((rand()*2)+1 as integer);
    if (i=1) then xgender='M'; else xgender='F';

    INSERT INTO CUSTOMER(ID, FIRSTNAME, LASTNAME, ADDRESS1, ADDRESS2, CITY, STATE, ZIP, COUNTRY, REGION, EMAIL, PHONE, CREDITCARDTYPE, CREDITCARD, CREDITCARDEXPIRATION, USERNAME, PASSWD, AGE, INCOME, GENDER)
    VALUES (:xID, :xFIRSTNAME, :xLASTNAME, :xADDRESS1, :xADDRESS2, :xCITY, :xSTATE, :xZIP, :xCOUNTRY, :xREGION, :xEMAIL, :xPHONE, :xCREDITCARDTYPE, :xCREDITCARD, :xCREDITCARDEXPIRATION, :xUSERNAME, :xPASSWD, :xAGE, :xINCOME, :xGENDER);
  end

/*prod*/

  c=gen_id(id,-gen_id(id,0));   /*reset id*/

  c=0;
  while (c<cnt) do
  begin
    c=c+1;
    xid=gen_id(id,1);
    xcategory_id=cast((rand()*15)+1 as integer);

    i=cast((rand()*1000)+1 as integer);
    select txt from tmp_titleword where id=:i into :t;
    xtitle=t;

    i=cast((rand()*1000)+1 as integer);
    select txt from tmp_titleword where id=:i into :t;
    xtitle=t||' '||xtitle;

    i=cast((rand()*1000)+1 as integer);
    select txt from tmp_titleword where id=:i into :t;
    xtitle=t||' '||xtitle;


    i=cast((rand()*200)+1 as integer);
    select txt from tmp_fn2 where id=:i into :t;
    xactor=t;
    i=cast((rand()*200)+1 as integer);
    select txt from tmp_ln2 where id=:i into :t;
    xactor=xactor||cast(' ' as varchar(1))||t||cast(', ' as varchar(3));

    i=cast((rand()*200)+1 as integer);
    select txt from tmp_fn2 where id=:i into :t;
    xactor=xactor||' '||t;
    i=cast((rand()*200)+1 as integer);
    select txt from tmp_ln2 where id=:i into :t;
    xactor=xactor||cast(' '  as varchar(1))||t;

    xprice=(rand()*40+10+.90);

    xspecial=cast((rand()*500)+1 as integer);
    if (xspecial>490) then xspecial=1; else xspecial=0;

    INSERT INTO PRODUCT(ID, CATEGORY_ID, TITLE, ACTOR, PRICE, SPECIAL)
    VALUES (:xID, :xCATEGORY_ID, :xTITLE, :xACTOR, :xPRICE, :xSPECIAL);

    INSERT INTO INVENTORY(ID, PRODUCT_ID, QUAN_IN_STOCK)
    VALUES (:xID, :xID, (cast((rand()*200) as integer)+cast(:cnt/10 as integer)));
 end

  /*order*/

  c=gen_id(id,-gen_id(id,0));   /*reset id*/
  execute procedure create_more_orders;
end;


CREATE OR ALTER PROCEDURE MV_TOP100SALES_INTERFACE
RETURNS (
    TITLE VARCHAR(50) CHARACTER SET NONE COLLATE NONE,
    AMOUNT BIGINT)
AS
declare variable TS timestamp;
BEGIN
  select mv.lastupdate
  from mv
  where mv.viewname='MV_TOP100SALES'
  into ts;
  ts=coalesce(ts,current_timestamp-1);
  if (ts<dateadd(minute,-1,current_time)) then
  begin
     execute procedure mv_top100sales_update;
     update or insert into MV (VIEWNAME, LASTUPDATE)
     values ('MV_TOP100SALES', current_timestamp)
     matching (VIEWNAME);
  end
  FOR
    select
        MV_TOP100SALES.TITLE,
        MV_TOP100SALES.AMOUNT
    from
        MV_TOP100SALES
    INTO :TITLE,
         :AMOUNT
  DO
  BEGIN
    SUSPEND;
  END
END;


CREATE OR ALTER PROCEDURE MV_TOP100SALES_UPDATE
AS
begin
  delete from mv_top100sales;
  insert into mv_top100sales
  select
  first 100
  product.title,
  sum(orderline.quantity) amount
  from product
  join orderline on orderline.product_id=product.id
  group by 1
  order by 2 desc;
  when any do begin end
end;


CREATE OR ALTER PROCEDURE PUTILS_PSOUNDEX_TEST
RETURNS (
    RES VARCHAR(200) CHARACTER SET NONE COLLATE NONE)
AS
declare variable I integer;
begin
  execute procedure putils.PSOUNDEX('Maier','ENG',4) returning_values :res;
  suspend;
end;




/******************************************************************************/
/****                           Stored Functions                           ****/
/******************************************************************************/

CREATE OR ALTER FUNCTION SOUNDEX (
    WORD VARCHAR(1000) CHARACTER SET NONE COLLATE NONE,
    LNG CHAR(3) CHARACTER SET NONE COLLATE NONE,
    SLEN BIGINT = 4)
RETURNS VARCHAR(1000) CHARACTER SET NONE COLLATE NONE
AS
declare variable res varchar(1000);
begin
  execute procedure ibesoundex(:word,:lng,:slen) returning_values res;
  return res;
end;




/******************************************************************************/
/****                            Package Bodies                            ****/
/******************************************************************************/

RECREATE PACKAGE BODY PUTILS
AS
begin
    PROCEDURE PSOUNDEX(
    WORD varchar(1000),
    LNG char(3),
    SLEN bigint)
    RETURNS (SOUNDEX VARCHAR(1000))
    as
    begin
      execute procedure ibesoundex(:word,:lng,:slen) returning_values soundex;
    end
end;


/******************************************************************************/
/****                              Privileges                              ****/
/******************************************************************************/


/* Privileges of triggers */
GRANT SELECT, DELETE ON PRODUCT TO TRIGGER V_PRODUCT_BD;
GRANT INSERT ON PRODUCT TO TRIGGER V_PRODUCT_BI;
GRANT EXECUTE ON PROCEDURE CHANGESTOCK TO TRIGGER V_PRODUCT_BU;

/* Privileges of procedures */
GRANT SELECT, INSERT ON ORDERLINE TO PROCEDURE CREATE_MORE_ORDERS;
GRANT SELECT, INSERT, UPDATE ON ORDERS TO PROCEDURE CREATE_MORE_ORDERS;
GRANT SELECT ON PRODUCT TO PROCEDURE CREATE_MORE_ORDERS;
GRANT SELECT, DELETE ON CUSTOMER TO PROCEDURE DELETEALL;
GRANT SELECT, DELETE ON CUSTOMER_HISTORY TO PROCEDURE DELETEALL;
GRANT SELECT, DELETE ON INVENTORY TO PROCEDURE DELETEALL;
GRANT SELECT, DELETE ON ORDERLINE TO PROCEDURE DELETEALL;
GRANT SELECT, DELETE ON ORDERS TO PROCEDURE DELETEALL;
GRANT SELECT, UPDATE, DELETE ON PRODUCT TO PROCEDURE DELETEALL;
GRANT SELECT, DELETE ON CUSTOMER TO PROCEDURE INITALL;
GRANT SELECT, UPDATE, DELETE ON PRODUCT TO PROCEDURE INITALL;
GRANT EXECUTE ON PROCEDURE DELETEALL TO PROCEDURE INITALL;
